// This linting configuration is pretty strict. Why? We want to establish a
// strong engineering culture. It doesn’t matter if we’re “right” when we enable
// a rule. It doesn’t matter if certain lints don’t actually prevents bugs. What
// matters is that we have chosen to write consistent code to develop collective
// ownership over our digital resources.
{
  "rules": {
    "member-ordering": [true, {"order": "statics-first"}],
    "adjacent-overload-signatures": true,
    "no-reference": true,
    "no-unnecessary-type-assertion": true,
    "prefer-for-of": true,
    "unified-signatures": true,
    "await-promise": true,
    "ban-comma-operator": true,
    "curly": true,
    "forin": true,
    "label-position": true,
    "no-arg": true,
    "no-conditional-assignment": true,
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-duplicate-switch-case": true,
    "no-duplicate-variable": true,
    "no-eval": true,
    "no-floating-promises": true,
    "no-for-in-array": true,
    "no-implicit-dependencies": true,
    "no-inferred-empty-object-type": true,
    "no-object-literal-type-assertion": true,
    "no-sparse-arrays": true,
    "no-string-throw": true,
    "no-submodule-imports": true,
    "no-switch-case-fall-through": true,
    "no-unbound-method": [true, "ignore-static"],
    "no-unsafe-finally": true,
    "no-unused-expression": true,
    "no-var-keyword": true,
    "prefer-conditional-expression": true,
    "prefer-object-spread": true,
    "radix": true,
    "restrict-plus-operands": true,
    "strict-type-predicates": true,
    "triple-equals": [true, "allow-null-check"],
    "use-default-type-parameter": true,
    "use-isnan": true,
    "deprecation": true,
    "no-duplicate-imports": true,
    "prefer-const": true,
    "prefer-readonly": true,
    "array-type": [true, "generic"],
    "arrow-return-shorthand": true,
    "binary-expression-operand-order": true,
    "class-name": true,
    "comment-format": [true, "check-space"],
    "jsdoc-format": true,
    "no-angle-bracket-type-assertion": true,
    "no-parameter-properties": true,
    "no-unnecessary-qualifier": true,
    "number-literal-format": true,
    "one-variable-per-declaration": true,
    "ordered-imports": [
      true,
      {
        "import-sources-order": "lowercase-last",
        "named-imports-order": "lowercase-last",
        "grouped-imports": true
      }
    ],
    "prefer-function-over-method": [true, "allow-public", "allow-protected"],
    "return-undefined": true,
    "variable-name": [
      true,
      "check-format",
      "allow-leading-underscore",
      "allow-trailing-underscore",
      "allow-pascal-case"
    ],

    // You’re free to use `any`, but if you do you must suppress this lint and
    // document why it’s safe!
    "no-any": true,

    // Similar to `any`. You’re free to use this feature, but if you do you must
    // suppress this lint and document why it’s safe!
    "no-non-null-assertion": true,

    // We expect enabling this rule to improve the design of our application. By
    // disallowing magic numbers we encourage reuse of common values.
    "no-magic-numbers": true,

    // Use arrow functions for lambdas. Prefer function declarations at the
    // top-level since they are hoistable.
    "only-arrow-functions": [true, "allow-declarations"],

    // Usually writing a bitwise operator is an accident. Disable this lint on
    // a per-module basis when you need to do some byte wrangling.
    "no-bitwise": true,

    // Console logging is good for debugging, but not for production. Disable
    // this lint when logging is part of the shared developer experience, but
    // try to avoid any logging in production code.
    "no-console": true,

    // If you’re using `this` outside of a class you’re being overly clever.
    "no-invalid-this": true,

    // Only used named exports. This forces the consumer to use the name you
    // defined. It also enables “Rename Symbol” to reach into module consumers.
    "no-default-export": true,

    // Prefer ES6. If you really need to use `require()` then suppress
    // this lint.
    "no-require-imports": true,

    // No more confusion around `== null` checks. Everything should be
    // `undefined` all the time. Never again wonder if you should use `null` or
    // `undefined`. Use `undefined`.
    "no-null-keyword": true,

    // Removing implicit truthy/falsey conversions and explicitly writing
    // `x === undefined` is a bit faster. Also, this rule allows
    // `strict-type-predicates` to be much more precise.
    "strict-boolean-expressions": true
  },
  "jsRules": {
    "member-ordering": [true, {"order": "statics-first"}],
    "no-reference": true,
    "prefer-for-of": true,
    "ban-comma-operator": true,
    "curly": true,
    "forin": true,
    "label-position": true,
    "no-arg": true,
    "no-conditional-assignment": true,
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-duplicate-switch-case": true,
    "no-duplicate-variable": true,
    "no-eval": true,
    "no-for-in-array": true,
    "no-implicit-dependencies": true,
    "no-sparse-arrays": true,
    "no-string-throw": true,
    "no-submodule-imports": true,
    "no-switch-case-fall-through": true,
    "no-unsafe-finally": true,
    "no-unused-expression": true,
    "no-var-keyword": true,
    "prefer-conditional-expression": true,
    "prefer-object-spread": true,
    "radix": true,
    "restrict-plus-operands": true,
    "triple-equals": [true, "allow-null-check"],
    "use-isnan": true,
    "deprecation": true,
    "no-duplicate-imports": true,
    "prefer-const": true,
    "arrow-return-shorthand": true,
    "binary-expression-operand-order": true,
    "class-name": true,
    "comment-format": [true, "check-space"],
    "jsdoc-format": true,
    "number-literal-format": true,
    "one-variable-per-declaration": true,
    "ordered-imports": [
      true,
      {
        "import-sources-order": "lowercase-last",
        "named-imports-order": "lowercase-last",
        "grouped-imports": true
      }
    ],
    "prefer-function-over-method": [true, "allow-public", "allow-protected"],
    "return-undefined": true,
    "variable-name": [
      true,
      "check-format",
      "allow-leading-underscore",
      "allow-trailing-underscore",
      "allow-pascal-case"
    ],

    // We expect enabling this rule to improve the design of our application. By
    // disallowing magic numbers we encourage reuse of common values.
    "no-magic-numbers": true,

    // Use arrow functions for lambdas. Prefer function declarations at the
    // top-level since they are hoistable.
    "only-arrow-functions": [true, "allow-declarations"],

    // Usually writing a bitwise operator is an accident. Disable this lint on
    // a per-module basis when you need to do some byte wrangling.
    "no-bitwise": true,

    // Console logging is good for debugging, but not for production. Disable
    // this lint when logging is part of the shared developer experience, but
    // try to avoid any logging in production code.
    "no-console": true,

    // If you’re using `this` outside of a class you’re being overly clever.
    "no-invalid-this": true,

    // Only used named exports. This forces the consumer to use the name you
    // defined. It also enables “Rename Symbol” to reach into module consumers.
    "no-default-export": true,

    // No more confusion around `== null` checks. Everything should be
    // `undefined` all the time. Never again wonder if you should use `null` or
    // `undefined`. Use `undefined`.
    "no-null-keyword": true
  }
}
